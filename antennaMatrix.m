function P = antennaMatrix(wpA, A)
%   wpA - antenna pattern width (deg), 1/2 power (3dB)
%   A - angle array structure generated by angleGrid()
%   A.tetD  must be a uniform grid from 0 to 180
%   pAm - square A.NxA.N matrix assuming A.tetD(1) - zenith
%       and A.tetD(end) - nadir (antenna pattern folded correspondingly)
if wpA<A.DTet
    P = eye(A.N);
else
    [~,pA] = antennaPattern(wpA,2*wpA,A.DTet);
    pA = pA/sum(pA);
    M = (length(pA)-1)/2;
    N2 = A.N + 2*M;
    pAm = zeros(A.N,N2);
    
    pAm(1,1:length(pA)) = pA;
    for i=2:A.N
        pAm(i,:) = circshift(pAm(i-1,:),[0 1]);
    end

    P = pAm(:,M+1:N2-M);
    jdx = (1:M);
    P(:,jdx+1) = pAm(:,jdx+M+1) + fliplr(pAm(:,jdx));
    jdx = (N2-M+1:N2);
    P(:,jdx-2*M-1) = pAm(:,jdx-M-1) + fliplr(pAm(:,jdx));
end

end
